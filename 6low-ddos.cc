#include "ns3/core-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-apps-module.h"
#include "ns3/internet-module.h"
#include "ns3/sixlowpan-module.h"
#include "ns3/mobility-module.h"
#include "ns3/nstime.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include <fstream>

#define TCP_SINK_PORT 9000
#define UDP_SINK_PORT 9001

//experimental parameters
#define MAX_BULK_BYTES 100000
#define DDOS_RATE "20480kb/s"
#define MAX_SIMULATION_TIME 10.0

//Number of Bots for DDoS
#define NUMBER_OF_BOTS 10

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("sixlowddos");

int main(int argc, char *argv[])
{
    bool verbose = false;
	//double simulationTime = 10; //seconds
   
   CommandLine cmd;
    cmd.AddValue("verbose", "turn on some relevant log components", verbose);
    cmd.Parse(argc, argv);

    if (verbose)
    {
        LogComponentEnable("SixLowPanNetDevice", LOG_LEVEL_ALL);
        LogComponentEnable("Ping6Application", LOG_LEVEL_ALL);
    }

    Packet::EnablePrinting();
    Packet::EnableChecking();

    NS_LOG_INFO("Create nodes.");
    Ptr<Node> n0 = CreateObject<Node>();
    Ptr<Node> r = CreateObject<Node>();
    Ptr<Node> n1 = CreateObject<Node>();

    NodeContainer net1(n0, r);
    NodeContainer net2(r, n1);
    NodeContainer all(n0, r, n1);

	//Nodes for attack bots
    /*NodeContainer botNodes;
    botNodes.Create(NUMBER_OF_BOTS);

    PointToPointHelper pp2;

    pp2.SetDeviceAttribute("DataRate", StringValue("100Mbps"));
    pp2.SetChannelAttribute("Delay", StringValue("1ms"));
    
    NetDeviceContainer botDeviceContainer[NUMBER_OF_BOTS];
    
    for (int i = 0; i < NUMBER_OF_BOTS; ++i)
    {
        botDeviceContainer[i] = pp2.Install(botNodes.Get(i), all.Get(1));
    }*/
    NS_LOG_INFO("Create IPv6 Internet Stack");
    InternetStackHelper internetv6;
    internetv6.Install(all);
    //internetv6.Install(botNodes);

    NS_LOG_INFO("Create channels.");
    CsmaHelper csma;
    csma.SetChannelAttribute("DataRate", DataRateValue(5000000));
    csma.SetChannelAttribute("Delay", TimeValue(MilliSeconds(2)));
    NetDeviceContainer d2 = csma.Install(net2);
    csma.SetDeviceAttribute("Mtu", UintegerValue(150));
    NetDeviceContainer d1 = csma.Install(net1);

    SixLowPanHelper sixlowpan;
    sixlowpan.SetDeviceAttribute("ForceEtherType", BooleanValue(true));
    NetDeviceContainer six1 = sixlowpan.Install(d1);

    NS_LOG_INFO("Create networks and assign IPv6 Addresses.");
    Ipv6AddressHelper ipv6;
    ipv6.SetBase(Ipv6Address("2001:1::"), Ipv6Prefix(64));
    Ipv6InterfaceContainer i11 = ipv6.Assign(six1);
    i11.SetForwarding(1, true);
    i11.SetDefaultRouteInAllNodes(1);
    
    ipv6.SetBase(Ipv6Address("2001:2::"), Ipv6Prefix(64));
    Ipv6InterfaceContainer i12 = ipv6.Assign(d2);
    i12.SetForwarding(0, true);
    i12.SetDefaultRouteInAllNodes(0);
    
   /* ipv6.SetBase(Ipv6Address("2001:3::"), Ipv6Prefix(64));
    
    for (int j = 0; j < NUMBER_OF_BOTS; ++j)
    {
        ipv6.Assign(botDeviceContainer[j]);
        ipv6.NewNetwork();
        
    }*/
    
    
    // DDoS Application Behaviour
    OnOffHelper onoff("ns3::TcpSocketFactory", Address(Inet6SocketAddress(i12.GetAddress(1,1), TCP_SINK_PORT)));
    onoff.SetAttribute ("DataRate", StringValue ("50Mbps")); 
    onoff.SetAttribute("OnTime", StringValue("ns3::ConstantRandomVariable[Constant=1]"));
    onoff.SetAttribute("OffTime", StringValue("ns3::ConstantRandomVariable[Constant=0]"));
    
    ApplicationContainer onOffApp1=onoff.Install(all.Get(0));
    onOffApp1.Start(Seconds(0.0));
    onOffApp1.Stop(Seconds(MAX_SIMULATION_TIME));
    
  /*  OnOffHelper onoff1("ns3::UdpSocketFactory", Address(Inet6SocketAddress(i12.GetAddress(1,1), TCP_SINK_PORT)));
    onoff1.SetConstantRate(DataRate(DDOS_RATE));
    onoff1.SetAttribute("OnTime", StringValue("ns3::ConstantRandomVariable[Constant=30]"));
    onoff1.SetAttribute("OffTime", StringValue("ns3::ConstantRandomVariable[Constant=0]"));
    
    ApplicationContainer onOffApp[NUMBER_OF_BOTS];
    

    //Install application in all bots
  
    for (int k = 0; k < NUMBER_OF_BOTS; ++k)
   {
        onOffApp[k] = onoff1.Install(botNodes.Get(k));
        onOffApp[k].Start(Seconds(0.0));
        onOffApp[k].Stop(Seconds(MAX_SIMULATION_TIME));
   }*/

    //Sender Application (Packets generated by this application are throttled)
    /*BulkSendHelper bulkSend("ns3::TcpSocketFactory", Inet6SocketAddress(i12.GetAddress(1,1), TCP_SINK_PORT));
    bulkSend.SetAttribute("MaxBytes", UintegerValue(MAX_BULK_BYTES));
    ApplicationContainer bulkSendApp = bulkSend.Install(all.Get(0));
    bulkSendApp.Start(Seconds(0.0));
    bulkSendApp.Stop(Seconds(MAX_SIMULATION_TIME));*/

    
    // TCP Sink Application on server side
    PacketSinkHelper TCPsink("ns3::TcpSocketFactory",
                             Inet6SocketAddress(i11.GetAddress(0,1)  , TCP_SINK_PORT));
    ApplicationContainer TCPSinkApp = TCPsink.Install(all.Get(2));
    TCPSinkApp.Start(Seconds(0.0));
    TCPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));

    //Ipv6GlobalRoutingHelper::PopulateRoutingTables();

  
  
  
    Simulator::Stop ();
    Simulator::Run ();
     
    //Simulator::Stop(Seconds(100));
    NS_LOG_INFO("Run Simulation.");
    Simulator::Run();
    Simulator::Destroy();
    NS_LOG_INFO("Done.");
}

